name: Django Tests Automation with GitHub Action on AWS

on:
  # workflow_dispatch:
  push:
    branches:
      - main
      # - master

  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   branches:
  #     - main
  #     - master

jobs:

  renovate-config-check:
    name: 'renovate:config'
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/setup-node@v2
      with:
        node-version: '16'
        check-latest: true

    - name: Install Renovate
      run: npm install -g renovate

    - name: Check Renovate configuraton
      run: renovate-config-validator

  test:
    name: Lint and build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'typescript' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Run Trivy vulnerability scanner to scan for Critical Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     exit-code: '1'
      #     severity: 'CRITICAL'
      #     skip-dirs: core

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag image to amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rest-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/rest-api:${{ github.sha }}
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          format: "table"

      # - name: Push image to amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: rest-api
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Logout of amazon ECR
      #   if: always()
      #   run: docker logout ${{ steps.login-ecr.outputs.registry }}